import numpy as np
class KNearestNeighbor:
    """ a kNN classifier with L2 distance """

    def __init__(self):
        self.y_train = None
        self.X_train = None

    def fit(self, X, y):
        self.X_train = X
        self.y_train = y

    def predict(self, X, k=1, num_loops=0):
         if num_loops == 0:
            dists = self.compute_distances_no_loops(X)
        elif num_loops == 1:
            dists = self.compute_distances_one_loop(X)
        elif num_loops == 2:
            dists = self.compute_distances_two_loops(X)
        else:
            raise ValueError('Invalid value %d for num_loops' % num_loops)

        return self.predict_labels(dists, k=k)
  def compute_distances_two_loops(self, X):
        
   
        num_test = X.shape[0]
        num_train = self.X_train.shape[0]
        dists = np.zeros((num_test, num_train))
        for i in range(num_test):
              for j in range(num_train):
                    diff = self.X_train[j] - X[i]
                    dists[i, j] = np.sqrt(np.dot(diff, diff))

          return dists

 def compute_distances_one_loop(self, X):
        
        num_test = X.shape[0]
        num_train = self.X_train.shape[0]
        dists = np.zeros((num_test, num_train))
        for i in range(num_test):
            dists[i] = np.sqrt(
                np.sum((self.X_train - X[i]) ** 2, axis=1)
            )
        return dists

def compute_distances_no_loops(X_train: np.array, X_test: np.array):
    num_test = X_test.shape[0]
    num_train = X_train.shape[0]
    dists = np.zeros((num_test, num_train))
    
    # Compute sum of squares for X_train
    sum_train = np.sum(X_train**2, axis=1).reshape(1, -1)
    
    # Compute sum of squares for X_test
    sum_test = np.sum(X_test**2, axis=1).reshape(-1, 1)
    
    # Compute dot product and multiply by -2
    dot_product = (-2 * np.dot(X_test, X_train.T))
    
    # Compute distances using the sum of squares and dot product
    dists = np.sqrt(sum_train + sum_test + dot_product)
    
    return dists

def predict_labels(self, dists: np.array, k: int = 1):  
        num_test = dists.shape[0]
        y_pred = np.zeros(num_test)

       for i in range(num_test):
          closest_y_indx = np.argsort(dists[i])[:k]
          closest_y = self.y_train[closest_y_indx]
    
            unique_labels, counts = np.unique(closest_y, return_counts=True)
            y_pred[i] = unique_labels[np.argmax(counts)]
    
          return y_pred
for i in range(num_test):
    closest_y_indx = np.argsort(dists[i])[:k]
    closest_y = self.y_train[closest_y_indx]
    
    unique_labels, counts = np.unique(closest_y, return_counts=True)
    y_pred[i] = unique_labels[np.argmax(counts)]
    
return y_pred
